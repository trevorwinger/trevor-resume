{"version":3,"sources":["Components/SubComponents/Header.js","Components/SubComponents/Body.js","Components/Section.js","App.js","serviceWorker.js","index.js"],"names":["Header","selectedColor","headerText","style","color","textAlign","Body","listOfThings","map","things","Section","header","bodyText","colors","Math","floor","random","length","select_color","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAeeA,G,UAbA,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAEtBC,EAAQ,CACVC,MAAMH,EACNI,UAAU,QAEd,OACI,6BACI,wBAAIF,MAAOA,GAAQD,MCShBI,EAjBF,SAAC,GACb,IADcL,EACf,EADeA,cAAeM,EAC9B,EAD8BA,aAEpBJ,EAAQ,CACVC,MAAMH,EACNI,UAAU,QAEd,OACI,6BACI,wBAAIF,MAAOA,GAEHI,EAAaC,KAAK,SAAAC,GAAM,OAAI,wBAAIN,MAAO,CAACC,MAAMH,IAAiBQ,SCUpEC,EAlBC,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,SAQtB,IAAMR,EANN,WAEI,IAAMS,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAC5D,OAAOA,EAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAOI,SAGtCC,GAEd,OACI,6BACI,kBAAC,EAAD,CAAQjB,cAAeG,EAAOF,WAAYS,IAC1C,kBAAC,EAAD,CAAMV,cAAeG,EAAOG,aAAcK,MCkCvCO,MA/Cf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,sDAEA,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAST,OAAO,YAAYC,SAAU,CAAC,qDACvC,4DACA,2DACA,sDACA,oEAEA,kBAAC,EAAD,CAASD,OAAO,kBAAkBC,SAAU,CAAC,6CAC7C,mCACA,sEAEA,kBAAC,EAAD,CAASD,OAAO,wBAAwBC,SAAU,CAAC,4BACnD,gCACA,wBACA,wBACA,mCACA,0BACA,2BACA,iDAEA,kBAAC,EAAD,CAASD,OAAO,mBAAmBC,SAAU,CAAC,wEAC9C,yCACA,mDACA,6CAEA,kBAAC,EAAD,CAASD,OAAO,yBAA0BC,SAAU,CAAC,4DACrD,kCACA,uDACA,2EAEA,kBAAC,EAAD,CAASD,OAAO,0BAA0BC,SAAU,CAAC,4EACvD,4GACA,oEACA,kIC/BYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a7ce694.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({selectedColor, headerText}) => {\n\n    const style = {\n        color:selectedColor,\n        textAlign:'left',\n    }\n    return(\n        <div>\n            <h2 style={style}>{headerText}</h2>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Body = ({selectedColor, listOfThings}) =>\n{\n    const style = {\n        color:selectedColor, \n        textAlign:'left',\n    }\n    return(\n        <div>\n            <ul style={style}>\n                {\n                    listOfThings.map((things => <li style={{color:selectedColor}}>{things}</li>))\n                }\n            </ul>\n        </div>\n    )\n} \n\nexport default Body;","import React from 'react';\nimport Header from './SubComponents/Header';\nimport Body from './SubComponents/Body';\n\nconst Section = ({header, bodyText}) => {\n\n    function select_color()\n    {\n        const colors = ['#ff79c6', '#bd93f9', '#8be9fd', '#ffb86c', '#50fa7b'];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    const color = select_color();\n    \n    return (\n        <div>\n            <Header selectedColor={color} headerText={header} />\n            <Body selectedColor={color} listOfThings={bodyText} />\n        </div>\n    )\n}\n\nexport default Section;","import React from 'react';\nimport './App.css';\nimport Section from './Components/Section';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Trevor Winger's Resume</h1>\n\n        <div className=\"Body\">\n          <Section header='Education' bodyText={['BA - Philosophy (University of Minnesota - Duluth)',\n          'BA - Cognitive Science (University of Minnesota - Duluth)',\n          'BA - Computer Science (University of Minnesota - Duluth)',\n          'BS - Linguistics (University of Minnesota - Duluth)',\n          'MCS - Computer Science (University of Minnesota - Twin Cities)']} />\n\n          <Section header='Work Experience' bodyText={['Product Manager - Software : Art Unlimited',\n          'Software Engineer : L&M Radiator',\n          'Technology Assistant (Software) : University of Minnesota Duluth']} />\n\n          <Section header='Scholarships & Awards' bodyText={['Intel Edge AI Scholarship',\n          'Raymond W Darland Scholarship',\n          'Minnesota State Grant',\n          'U Promise Scholarship',\n          'Retta & Henry Ehlers Scholarship',\n          'Philosophy Travel Award',\n          'Grow with Google Scholar',\n          'York University Computer Vision Scholarship']} />\n\n          <Section header='Technical Skills' bodyText={['Programming Languages: C, C++, C#, Java, Python, JavaScript, Go, MIPS',\n          'UI Related: HTML, CSS, XML, JSX, React',\n          'Database: familiar with both SQL & NoSQL systems',\n          'Version Control: git, Github, BitBucket', ]} />\n\n          <Section header='Teaching Assitantships'  bodyText={['Philosophy 1025: Introduction to Cognitive Science (2017)',\n          'Linguistics 3103: Syntax (2018)',\n          'Linguistics 1811: Introduction to Linguistics (2018)',\n          'Linguistics 4011: Programming for Natural Language Researchers (2019)']}/>\n\n          <Section header='Research Assistantships' bodyText={['Creating a database of pejorative phrases with Dr. Jeanine Weekes-Schroer',\n        'Collecting dialectical information pertaining to syntactic boundaries and pragmatics with Dr. Will Salmon',\n        'Creating a corpus of syntactic information with Dr. Chongwon Park',\n        'Conducting computational linguistics analysis on authors over time mapping mental decay over time with Dr. Chongwon Park']} />\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}